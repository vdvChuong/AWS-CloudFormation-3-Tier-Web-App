AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation'
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be the SubnetId of an existing Virtual Private Cloud.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  DBClass:
    Description: Database instance class
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
      - db.t1.micro
      - db.m1.medium
    ConstraintDescription: must select a valid database instance type.
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    Default: admin
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    Default: password
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  MultiAZDatabase:
    Default: 'false'
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.
  WebServerCapacity:
    Default: '1'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer
        + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VpcId'
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VpcId'
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      Engine: mysql
      MultiAZ: !Ref 'MultiAZDatabase'
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      DBInstanceClass: !Ref 'DBClass'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBSubnetGroupName: !Ref 'MyDBSubnetGroup'
      VPCSecurityGroups:
        - !GetAtt 'DBSecurityGroup.GroupId'
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds: !Ref 'Subnets'
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'Subnets'
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: !Ref 'WebServerCapacity'
      LoadBalancerNames:
        - !Ref 'ELB'
  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/SamplePage.php
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      Subnets: !Ref 'Subnets'
      SecurityGroups:
        - !GetAtt 'WebServerSecurityGroup.GroupId'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-079db87dc4c10ac91
      InstanceType: !Ref 'InstanceType'
      SecurityGroups:
        - !GetAtt 'WebServerSecurityGroup.GroupId'
      KeyName: !Ref 'KeyName'
Outputs:
  WebsiteURL:
    Description: 'Website URL using ELB DNS:'
    Value: !Join
      - ''
      - - http://
        - !GetAtt 'ELB.DNSName'
  RDSEndpoint:
    Description: 'Endpoint of the RDS instance:'
    Value: !GetAtt 'DBInstance.Endpoint.Address'
